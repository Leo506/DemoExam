@using System.Security.Claims
@using DemoExam.Blazor.Services.Auth
@using DemoExam.Blazor.Pages
@using DemoExam.Domain.Models
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light border-bottom box-shadow mb-3 d-flex">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">Поваренок</a>
            <button aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation" 
                    class="navbar-toggler"
                    data-bs-target=".navbar-collapse"
                    data-bs-toggle="collapse" type="button">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div>
                <AuthorizeView>
                    <NotAuthorized>
                        <a class="btn btn-outline-primary me-2" type="button" href="/Login">Вход</a>
                        <a class="btn btn-primary" type="button" href="/Registration">Регистрация</a>
                    </NotAuthorized>
                    <Authorized>
                        <div class="dropdown">
                            <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @_currentUserName
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="/@nameof(MyOrders)">Мои Заказы</a></li>
                                <li><a class="dropdown-item" href="/@nameof(Catalog)">Каталог</a></li>
                                @if (_user?.IsInRole(Role.AdminRoleName) is true)
                                {
                                    <li><a class="dropdown-item" href="/@nameof(Products)">Товары</a></li>
                                    <li><a class="dropdown-item" href="/@nameof(Orders)">Все заказы</a></li>
                                }
                                else if (_user?.IsInRole(Role.ManagerRoleName) is true)
                                {
                                    <li><a class="dropdown-item" href="/@nameof(Orders)">Все заказы</a></li>
                                }
                                <li><a class="dropdown-item text-danger" href="#" @onclick="OnLogoutClick">Выйти</a></li>
                            </ul>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </nav>
</header>
<main role="main" class="pb-3">
    @Body
</main>

@code
{
    private string _currentUserName = default!;
    private ClaimsPrincipal? _user;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        if (state.User.Identity?.IsAuthenticated is false)
            return;
        _user = state.User;
        _currentUserName = state.User.Claims.First(x => x.Type == ClaimsIdentity.DefaultNameClaimType).Value;
    }

    private async Task OnLogoutClick()
    {
        await AuthService.Logout().ConfigureAwait(false);
        NavigationManager.NavigateTo("/", true);
    }
}
