@using PickupPoint = DemoExam.Blazor.Shared.Dto.Responses.PickupPoint
@using DemoExam.Blazor.ViewModels
@using DemoExam.Domain.Models
@using DemoExam.Blazor.Services.PickupPoints
@using Arbus.Network
@using BlazorBootstrap
@inject IPickupPointsService PickupPointService
@inject HttpClientContext ClientContext
<div class="modal fade" id="orderEditModal" tabindex="-1" aria-labelledby="orderEditModalLabel">
    <div class="modal-dialog">
        <div class="modal-content order-content @(ViewModel is null ? "justify-content-center align-items-center" : "")">
            @if (ViewModel is null)
            {
                <div class="spinner-border text-center"/>
            }
            else
            {
                <div class="modal-header">
                    <h5 class="modal-title" id="orderModalLabel">Заказ №@ViewModel.Id</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="ViewModel">
                        <div class="mb-3">
                            <label for="status_input" class="form-label">Статус</label>
                            <InputSelect id="status_input" @bind-Value="ViewModel.Status"
                                         class="form-select">
                                <option value="@OrderStatusConstants.NewOrder">@OrderStatusConstants.NewOrder</option>
                                <option value="@OrderStatusConstants.Completed">@OrderStatusConstants.Completed</option>
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="delivery_input" class="form-label">Дата доставки</label>
                            <DateInput @bind-Value="ViewModel.DeliveryDate"
                                       EnableMinMax="true"
                                       ElementId="delivery_input"
                                       Min="ViewModel.OrderDate"
                                       Max="DateOnly.MaxValue"
                                       class="form-control"/>
                        </div>
                        <div class="d-flex justify-content-between">
                            <p>Дата оформления</p>
                            <p>@ViewModel.OrderDate</p>
                        </div>
                        <div class="mb-3">
                            <label for="pickupPoint_input" class="form-label">Пункт выдачи</label>
                            <InputSelect id="pickupPoint_input" @bind-Value="ViewModel.PickupPointId"
                                         class="form-select">
                                @foreach (var point in _pickupPoints)
                                {
                                    <option value="@point.Id">@point.Address</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="d-flex justify-content-between">
                            <p>Код получения</p>
                            <p>@ViewModel.GetCode</p>
                        </div>
                        <h5>Состав:</h5>
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Товар</th>
                                <th>Количество</th>
                                <th>Итоговая стоимость</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var item in ViewModel.OrderItems)
                            {
                                <tr>
                                    <td><a target="_blank" href="/catalog/@item.Article">@item.Title</a></td>
                                    <td>
                                        <div class="buttons_container">
                                            @if (ViewModel.CanDeleteItem(item.Article))
                                            {
                                                <button class="change-amount-button"
                                                        @onclick="() => DeleteItem(item.Article)">
                                                    <i class="bi-dash"></i>
                                                </button>
                                            }
                                            <div class="number">@item.Amount</div>
                                            @if (ViewModel.CanAddItem(item.Article))
                                            {
                                                <button class="change-amount-button"
                                                        @onclick="() => AddItem(item.Article)">
                                                    <i class="bi-plus"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                    <td>@item.TotalCost.ToString("F2") ₽</td>
                                </tr>
                            }
                            </tbody>
                            <tfoot>
                            <tr>
                                <td colspan="2" class="fw-bold">Итоговая стоимость заказа:</td>
                                <td>@ViewModel.OrderItems.Sum(x => x.TotalCost).ToString("F2") ₽</td>
                            </tr>
                            </tfoot>
                        </table>
                        <button type="submit" class="btn btn-primary" @onclick="async () => await SaveChanges()">
                            Сохранить
                        </button>
                    </EditForm>
                </div>
            }

        </div>
    </div>
</div>

@code {

    [Parameter]
    public OrderEditViewModel? ViewModel { get; set; }
    
    [Parameter]
    public Func<Task> SaveChanges { get; set; }

    private List<PickupPoint> _pickupPoints = new();

    protected override async Task OnInitializedAsync()
    {
        _pickupPoints = await PickupPointService.GetAll();
    }

    private void AddItem(string article)
    {
        ViewModel?.AddItem(article);
        StateHasChanged();
    }

    private void DeleteItem(string article)
    {
        ViewModel?.DeleteItem(article);
        StateHasChanged();
    }

}