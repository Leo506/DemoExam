@page "/Catalog"
@using DemoExam.Blazor.Services.Basket
@using DemoExam.Blazor.Components
@inject HttpClient HttpClient
@inject IBasketService BasketService

<PageTitle>Каталог</PageTitle>

<link rel="stylesheet" href="css/open-iconic/font/css/open-iconic-bootstrap.min.css"/>


<h2>Каталог товаров</h2>
<div class="d-flex flex-row gap-5">
    <div class="input-group">
        <span class="input-group-text">
            <i class="oi oi-magnifying-glass"></i>
        </span>
        <input class="form-control" type="text" placeholder="Поиск по названию" id="searchString"
               @bind="_searchString" @bind:after="OnSearchInputChanged"/>
    </div>
    <select class="form-select" name="category" @bind="_categoryFilter" @bind:after="OnCategoryFilterChanged">
        <option value="all">Все категории</option>
        @if (_categories?.Any() is true)
        {
            @foreach (var category in _categories)
            {
                <option value="@category">@category</option>
            }
        }
    </select>
</div>

<div class="cards-layout">
    @if (_products is null)
    {
        for (var i = 0; i < 8; i++)
        {
            <ProductCardSkeleton />
        }
    }
    else if (_products.Any())
    {
        foreach (var product in _products)
        {
            <ProductCard Product="product"/>
        }
    }
    else
    {
        <p>Нет товаров</p>
    }
</div>

<Basket/>

@code {

    private IEnumerable<ProductDto>? _products;
    private IEnumerable<string> _categories = Enumerable.Empty<string>();

    private string? _categoryFilter = "all";
    private string? _searchString;
    
    protected override async Task OnInitializedAsync()
    {
        await GetCatalog();
        GetCategories();
    }

    private void GetCategories()
    {
        _categories = _products?.Any() is true 
            ? _products.DistinctBy(x => x.ProductCategory).Select(x => x.ProductCategory) 
            : Enumerable.Empty<string>();
    }

    private async Task GetCatalog() => 
        _products = await HttpClient.GetFromJsonAsync<List<ProductDto>>("catalog") ?? new List<ProductDto>();

    private Task OnSearchInputChanged() => OnFilterChanged();

    private Task OnCategoryFilterChanged() => OnFilterChanged();

    private async Task OnFilterChanged() => 
        _products = await HttpClient.GetFromJsonAsync<List<ProductDto>>($"catalog/search?searchString={_searchString}&category={_categoryFilter}");

}