@page "/Orders"
@using DemoExam.Blazor.Extensions
@using DemoExam.Blazor.Network.Endpoints
@using DemoExam.Blazor.Shared.Dto.Responses
@using DemoExam.Blazor.ViewModels
@using DemoExam.Domain.Models
@using Arbus.Network
@using BlazorBootstrap
@using DemoExam.Blazor.Components
@using DemoExam.Blazor.Comparers
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject HttpClientContext ClientContext
@inject IJSRuntime JsRuntime
@inject ToastService ToastService
<PageTitle>Заказы</PageTitle>
<h3>Заказы</h3>

<div class="d-flex w-25 align-items-center">
    <span>
        <i class="bi-sort-down"></i>
    </span>
    <select class="form-select" id="sorting" @bind="_sortField" @bind:after="OnSortFieldChanged">
        <option>@SortByStatus</option>
        <option>@SortByDeliveryDate</option>
    </select>
</div>
<table class="table table-striped table-hover" sortable="True">
    <thead>
    <tr>
        <th scope="col">№</th>
        <th scope="col">Статус</th>
        <th scope="col">Дата доставки</th>
        <th scope="col">Пункт выдачи</th>
        <th scope="col">Код получения</th>
        <th scope="col">Действия</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var order in _orderShortDtos)
    {
        <OrderShortView Order="order" OnEditClickCallback="OnEditOrderClick" OnDeleteClickCallback="OnOrderDeleteClick"/>
    }
    </tbody>
</table>


<OrderEditView ViewModel="_currentEditViewModel" SaveChanges="SaveChanges"/>

<Basket/>

@code {

        private const string SortByStatus = "По статусу";
        private const string SortByDeliveryDate = "По дате доставки";

    private string _sortField = default!;

    private List<OrderShort> _orderShortDtos = new();

    private OrderEditViewModel? _currentEditViewModel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (await EnsureUserIsAdminOrManager() is false) 
                return;

            _sortField = SortByStatus;
            await UpdateOrdersList();
        }
        catch (Exception e)
        {
            // TODO: exception handling
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

    private async Task<bool> EnsureUserIsAdminOrManager()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        if (authState.User.Identity?.IsAuthenticated is false)
        {
            NavigationManager.NavigateTo(nameof(Login));
            return false;
        }

        if (authState.User.IsInRole(Role.AdminRoleName) is false && authState.User.IsInRole(Role.ManagerRoleName) is false)
        {
            NavigationManager.NavigateTo("/");
            return false;
        }

        return true;
    }

    private void OnSortFieldChanged()
    {
        _orderShortDtos = _sortField == SortByStatus
            ? _orderShortDtos.OrderBy(x => x.Status, new StatusComparer()).ToList()
            : _orderShortDtos.OrderByDescending(x => x.DeliveryDate).ToList();
    }


    private async Task OnEditOrderClick(int id)
    {
        _currentEditViewModel = new(await ClientContext.RunEndpoint(new OrderEndpoint(id)));
        await JsRuntime.ShowModal("orderEditModal");
        StateHasChanged();
    }
    
    private async Task SaveChanges()
    {
        try
        {
            await ClientContext.RunEndpoint(new OrderEditEndpoint(_currentEditViewModel!.Id, _currentEditViewModel.ToDto()));
            await JsRuntime.CloseModal();
            await UpdateOrdersList();
        }
        catch (Exception e)
        {
            ToastService.FromException(e);
        }
    }
    
    private async Task OnOrderDeleteClick(int orderId)
    {
        var confirm = await JsRuntime.Confirm("Уверены, что хотите удалить заказ?");
        if (confirm is false)
            return;
        await ClientContext.RunEndpoint(new DeleteOrderEndpoint(orderId));
        await UpdateOrdersList();
    }
    
    private async Task UpdateOrdersList()
    {
        _orderShortDtos = await ClientContext.RunEndpoint(new AllOrdersEndpoint());
        OnSortFieldChanged();
        StateHasChanged();
    }
}