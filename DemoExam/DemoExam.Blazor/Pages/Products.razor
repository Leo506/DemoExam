@page "/Products"
@using DemoExam.Blazor.Extensions
@using DemoExam.Blazor.Network.Endpoints
@using DemoExam.Blazor.ViewModels
@using DemoExam.Domain.Models
@using DemoExam.Blazor.Shared.Dto.Requests
@using Arbus.Network
@using BlazorBootstrap
@using Product = DemoExam.Blazor.Shared.Dto.Responses.Product
@using DemoExam.Blazor.Components
@inject HttpClientContext ClientContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ToastService ToastService

<PageTitle>Товары</PageTitle>

<h3>Товары</h3>

<button class="btn btn-outline-primary" @onclick="OnCreateProductClick">Добавить</button>
<table class="table table-hover" sortable="True">
    <thead>
    <tr>
        <th scope="col">Артикул</th>
        <th scope="col">Название</th>
        <th scope="col">Категория</th>
        <th scope="col">Цена</th>
        <th scope="col">Скидка(%)</th>
        <th scope="col">Производитель</th>
        <th scope="col">Поставщик</th>
        <th scope="col">На складе</th>
        <th scope="col">Действия</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var product in _products)
    {
        <ProductRow Product="product" 
                    OnDeleteClickCallback="OnDeleteProductClick"
                    OnEditClickCallback="OnEditProductClick"/>
    }
    </tbody>
</table>

<ProductEditView ProductEditViewModel="_selectedViewProductEdit"
                 SaveChanges="SaveChanges"/>

<NewProductView NewProduct="_newProduct" 
                SaveNewProduct="SaveNewProduct"/>

<Basket/>

@code {

    private List<Product> _products = new();

    private ProductEditViewModel? _selectedViewProductEdit;

    private NewProduct? _newProduct;

    protected override async Task OnInitializedAsync()
    {
        if (await EnsureUserIsAdmin() is false)
            return;
        _products = await ClientContext.RunEndpoint(new ProductsListEndpoint());
    }

    private async Task<bool> EnsureUserIsAdmin()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated is false)
        {
            NavigationManager.NavigateTo(nameof(Login));
            return false;
        }

        if (state.User.IsInRole(Role.AdminRoleName) is false)
        {
            NavigationManager.NavigateTo(nameof(Catalog));
            return false;
        }

        return true;
    }

    private async Task OnDeleteProductClick(string article)
    {
        var confirm = await JsRuntime.Confirm("Уверены, что хотите удалить товар?");
        if (confirm)
        {
            await ClientContext.RunEndpoint(new DeleteProductEndpoint(article));
            await UpdateProductsList();
        }
    }

    private async Task OnEditProductClick(string article)
    {
        var product = _products.First(x => x.ArticleNumber == article);
        _selectedViewProductEdit = new ProductEditViewModel(product);
        StateHasChanged();
        await JsRuntime.ShowModal("productEditModal");
    }

    private async Task OnCreateProductClick()
    {
        _newProduct = new();
        await JsRuntime.ShowModal("createProductModal");
    }

    private async Task SaveChanges()
    {
        await ClientContext.RunEndpoint(new ProductEditEndpoint(_selectedViewProductEdit!.ArticleNumber, _selectedViewProductEdit.ToDto()));
        await JsRuntime.CloseModal();
        await UpdateProductsList();
    }

    private async Task SaveNewProduct(NewProduct newProduct)
    {
        await ClientContext.RunEndpoint(new NewProductEndpoint(newProduct));
        await JsRuntime.CloseModal();
        await UpdateProductsList();
    }

    private async Task UpdateProductsList()
    {
        _products = await ClientContext.RunEndpoint(new ProductsListEndpoint());
        StateHasChanged();
    }

}